package com.salonig.studentdemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Address_position = new Property(1, Integer.class, "address_position", false, "ADDRESS_POSITION");
        public final static Property Roll_no = new Property(2, String.class, "roll_no", false, "ROLL_NO");
        public final static Property Full_name = new Property(3, String.class, "full_name", false, "FULL_NAME");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property Gender = new Property(5, Boolean.class, "gender", false, "GENDER");
        public final static Property Course_position = new Property(6, Integer.class, "course_position", false, "COURSE_POSITION");
        public final static Property Course_name = new Property(7, String.class, "course_name", false, "COURSE_NAME");
        public final static Property Image_path = new Property(8, String.class, "image_path", false, "IMAGE_PATH");
        public final static Property Address_name = new Property(9, String.class, "address_name", false, "ADDRESS_NAME");
    }


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADDRESS_POSITION\" INTEGER," + // 1: address_position
                "\"ROLL_NO\" TEXT," + // 2: roll_no
                "\"FULL_NAME\" TEXT," + // 3: full_name
                "\"DATE\" INTEGER," + // 4: date
                "\"GENDER\" INTEGER," + // 5: gender
                "\"COURSE_POSITION\" INTEGER," + // 6: course_position
                "\"COURSE_NAME\" TEXT," + // 7: course_name
                "\"IMAGE_PATH\" TEXT," + // 8: image_path
                "\"ADDRESS_NAME\" TEXT);"); // 9: address_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer address_position = entity.getAddress_position();
        if (address_position != null) {
            stmt.bindLong(2, address_position);
        }
 
        String roll_no = entity.getRoll_no();
        if (roll_no != null) {
            stmt.bindString(3, roll_no);
        }
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(4, full_name);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        Boolean gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender ? 1L: 0L);
        }
 
        Integer course_position = entity.getCourse_position();
        if (course_position != null) {
            stmt.bindLong(7, course_position);
        }
 
        String course_name = entity.getCourse_name();
        if (course_name != null) {
            stmt.bindString(8, course_name);
        }
 
        String image_path = entity.getImage_path();
        if (image_path != null) {
            stmt.bindString(9, image_path);
        }
 
        String address_name = entity.getAddress_name();
        if (address_name != null) {
            stmt.bindString(10, address_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer address_position = entity.getAddress_position();
        if (address_position != null) {
            stmt.bindLong(2, address_position);
        }
 
        String roll_no = entity.getRoll_no();
        if (roll_no != null) {
            stmt.bindString(3, roll_no);
        }
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(4, full_name);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        Boolean gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender ? 1L: 0L);
        }
 
        Integer course_position = entity.getCourse_position();
        if (course_position != null) {
            stmt.bindLong(7, course_position);
        }
 
        String course_name = entity.getCourse_name();
        if (course_name != null) {
            stmt.bindString(8, course_name);
        }
 
        String image_path = entity.getImage_path();
        if (image_path != null) {
            stmt.bindString(9, image_path);
        }
 
        String address_name = entity.getAddress_name();
        if (address_name != null) {
            stmt.bindString(10, address_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // address_position
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roll_no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // full_name
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // gender
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // course_position
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // course_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // image_path
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // address_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddress_position(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRoll_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFull_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setCourse_position(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCourse_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImage_path(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
